import requestsimport reimport xbmc, xbmcgui, xbmcaddonfrom bs4 import BeautifulSoupimport randomimport resolveurlimport redialog = xbmcgui.Dialog()Notice =  xbmc.LOGINFOaddon_id = 'script.module.sportiescrapers'AddonTitle = ('[COLOR aqua][B]S[COLOR red]PORTI[COLOR aqua]E[/B][/COLOR]')dp = xbmcgui.DialogProgress()user_agent_list = [    ("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)"     "Chrome/77.0.3865.90 Safari/537.36"),    ("Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)"     "Chrome/79.0.3945.130 Safari/537.36"),]pattern = r'''['"](http[^'"]+).*?>(.*?)<'''def get_headers():    headers = {        "Connection": "keep-alive",        "Cache-Control": "max-age=0",        "Upgrade-Insecure-Requests": "1",        "User-Agent": random.choice(user_agent_list),        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8",        "Accept-Encoding": "gzip, deflate",        "Accept-Language": "en-US,en;q=0.9,fr;q=0.8",        "Sec-Ch-Ua" : "Microsoft Edge;v=131, Chromium;v=131, Not_A Brand;v=24"    }    return headers    class Scraper:    def __init__(self):        self.Base = 'https://www.fullreplays.com/page/%s/'        self.Source_Url = 'https://basketballreplays.net'        self.links = []        self.resolved = []    def Get_Events(self,sport):        if sport == 'football':            page = 1            try:                self.links.append({'title': '[COLOR magenta]Replays For Football[/COLOR]', 'url': ''})                msg = "Scraping Football Replays"                dp.create(AddonTitle,msg)                while page <= 20:                    if dp.iscanceled():                        dp.close()                        return self.links                        quit()                    enquire = requests.get(self.Base % page,headers=get_headers()).text                    soup = BeautifulSoup(enquire, "html.parser")                    data = soup.find('div', class_={'row vlog-posts row-eq-height'})                    for i in data.find_all('div', class_={'entry-image'}):                        game_title = i.a['title']                        game_title = game_title.replace('Full Match:','').strip()                        link = i.a['href']                        self.links.append({'title': game_title, 'url': link})                    dp.update(page*5,"%s\nGot Page : %s" % (msg,page))                    page += 1                dp.close()                if len(self.links) < 1:                     xbmc.log("No Results From ::: Football" , level=Notice)                     dialog.notification(AddonTitle, '[COLOR aqua]No Links Found[/COLOR]',AddonIcon, 4000)                else: return self.links            except Exception as c:                xbmc.log("SCRAPER ERROR Football  ::: %s" %c , level=Notice)        else:            pass                def Resolve_link(self,sport,resolve_url):        if sport == 'football':            enquire = requests.get(resolve_url,headers=get_headers()).text            soup = BeautifulSoup(enquire, "html.parser")            data = soup.find_all('ul', class_={'frc-vid-sources-list'})            for i in data:                find_links = re.findall(pattern,str(i))                for link,title in find_links:                    if resolveurl.HostedMediaFile(link).valid_url():                        try:                            stream_url = resolveurl.HostedMediaFile(link).resolve()                            self.resolved.append({'title': title,'url': stream_url})                        except Exception: pass            if len(self.resolved) < 1: xbmc.log("No Resolved Results From ::: Football" , level=Notice)             else: return self.resolved        else:            pass